// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –≤ –±–æ—Ç–µ
const http = require('http');
const fs = require('fs');

async function getNgrokUrl() {
  return new Promise((resolve, reject) => {
    const req = http.get('http://localhost:4040/api/tunnels', (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          const httpsUrl = response.tunnels.find(t => t.proto === 'https')?.public_url;
          if (httpsUrl) {
            resolve(httpsUrl);
          } else {
            reject('HTTPS tunnel not found');
          }
        } catch (error) {
          reject('Failed to parse ngrok response');
        }
      });
    });
    
    req.on('error', () => reject('Failed to connect to ngrok'));
    req.setTimeout(3000, () => {
      req.destroy();
      reject('Timeout');
    });
  });
}

function updateBotFile(newUrl) {
  try {
    let content = fs.readFileSync('telegram-bot.cjs', 'utf8');
    const oldPattern = /const MINI_APP_URL = ['"`]([^'"`]+)['"`];/;
    const newContent = content.replace(oldPattern, `const MINI_APP_URL = '${newUrl}';`);
    
    if (newContent !== content) {
      fs.writeFileSync('telegram-bot.cjs', newContent);
      return true;
    }
    return false;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
    return false;
  }
}

async function main() {
  console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º ngrok URL...');
  
  for (let i = 0; i < 15; i++) {
    try {
      const url = await getNgrokUrl();
      console.log(`\n‚úÖ NGROK URL –ø–æ–ª—É—á–µ–Ω: ${url}`);
      
      if (updateBotFile(url)) {
        console.log('‚úÖ –§–∞–π–ª –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        console.log('\nüì± –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:');
        console.log('   node telegram-bot.cjs');
        console.log('\nüéØ –ò –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram!');
        return;
      } else {
        console.log('‚ö†Ô∏è URL —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π');
        return;
      }
    } catch (error) {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/15: ${error}`);
      if (i < 14) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
  }
  
  console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URL');
  console.log('üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
  console.log('   1. –ó–∞–ø—É—â–µ–Ω: npm run dev');
  console.log('   2. –ó–∞–ø—É—â–µ–Ω: npx ngrok http 5173');
  console.log('   3. –î–æ—Å—Ç—É–ø–µ–Ω: http://localhost:4040');
}

main();
