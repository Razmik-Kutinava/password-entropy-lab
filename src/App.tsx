// /src/App.tsx
import { createSignal, createMemo, onMount, For, Show } from "solid-js";
import { assessPassword, NIST_MODERATE, type Assessment, type Policy, ALL_POLICIES, POLICY_CATEGORIES } from "./core/assessPassword";
import { exportPDF, exportJSON } from "./utils/exportPDF";

// –¢–∏–ø—ã –¥–ª—è Telegram WebApp
declare global {
  interface Window {
    Telegram?: {
      WebApp: {
        ready(): void;
        expand(): void;
        close(): void;
        MainButton: {
          text: string;
          color: string;
          textColor: string;
          isVisible: boolean;
          isActive: boolean;
          setText(text: string): void;
          onClick(callback: () => void): void;
          show(): void;
          hide(): void;
          enable(): void;
          disable(): void;
        };
        BackButton: {
          isVisible: boolean;
          onClick(callback: () => void): void;
          show(): void;
          hide(): void;
        };
        themeParams: {
          bg_color?: string;
          text_color?: string;
          hint_color?: string;
          link_color?: string;
          button_color?: string;
          button_text_color?: string;
        };
        colorScheme: 'light' | 'dark';
        isExpanded: boolean;
        viewportHeight: number;
        viewportStableHeight: number;
        showAlert?(message: string): void;
        showPopup?(params: any): void;
      };
    };
  }
}

const STRENGTH_LABELS = [
  "–û—á–µ–Ω—å —Å–ª–∞–±—ã–π", 
  "–°–ª–∞–±—ã–π", 
  "–°—Ä–µ–¥–Ω–∏–π", 
  "–°–∏–ª—å–Ω—ã–π", 
  "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
];

const PATTERN_LABELS: Record<string, string> = {
  repeat: "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã",
  keyboard_seq: "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
  numeric_seq: "–ß–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
  year: "–°–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–¥ (1990-2025)",
  single_char: "–û–¥–∏–Ω —Å–∏–º–≤–æ–ª",
  only_digits: "–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
};

export default function App() {
  const [password, setPassword] = createSignal("");
  const [showPassword, setShowPassword] = createSignal(false);
  const [selectedPolicy, setSelectedPolicy] = createSignal<Policy>(NIST_MODERATE);
  const [showPolicySelector, setShowPolicySelector] = createSignal(false);
  const [activeCategory, setActiveCategory] = createSignal<keyof typeof POLICY_CATEGORIES>("basic");
  
  // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è
  const result = createMemo(() => assessPassword(password(), selectedPolicy()));

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  const status = createMemo(() => {
    const comp = result().compliance;
    if (comp.some(c => c.status === "FAIL")) return "FAIL";
    if (comp.some(c => c.status === "WARN")) return "WARN";
    return "OK";
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  onMount(() => {
    if (typeof window.Telegram?.WebApp !== "undefined") {
      const tg = window.Telegram.WebApp;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      tg.ready();
      tg.expand();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
      tg.MainButton.setText("üìÑ –≠–∫—Å–ø–æ—Ä—Ç PDF");
      tg.MainButton.show();
      tg.MainButton.onClick(() => {
        if (password().length > 0) {
          console.log("MainButton PDF export clicked");
          exportPDF(result()).catch(error => {
            console.error("PDF export failed:", error);
            tg.showAlert?.("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ JSON —ç–∫—Å–ø–æ—Ä—Ç.") || 
            alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ JSON —ç–∫—Å–ø–æ—Ä—Ç.");
          });
        } else {
          tg.showAlert?.("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞") || 
          alert("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
        }
      });

      console.log("Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      console.log("–¢–µ–º–∞:", tg.colorScheme);
      console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã:", tg.themeParams);
    } else {
      console.log("–ó–∞–ø—É—Å–∫ –≤–Ω–µ Telegram WebApp");
    }
  });

  const handlePasswordInput = (e: Event) => {
    const target = e.currentTarget as HTMLInputElement;
    setPassword(target.value);
  };

  const handleExportJSON = () => {
    if (password().length > 0) {
      exportJSON(result());
    } else {
      alert("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
    }
  };

  const handleExportPDF = () => {
    if (password().length > 0) {
      exportPDF(result());
    } else {
      alert("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
    }
  };

  return (
    <div class="container">
      <h1 style="text-align: center; margin-bottom: 24px; color: var(--tg-theme-text-color, #000);">
        üîê Password & Entropy Lab
      </h1>
      
      {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
      <div style="margin-bottom: 20px;">
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px;">
          <label style="font-weight: bold; color: var(--tg-theme-text-color, #333);">
            üõ°Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
          </label>
          <button
            onClick={() => setShowPolicySelector(!showPolicySelector())}
            style={`
              background: ${selectedPolicy().color}; 
              color: white; 
              border: none; 
              border-radius: 20px; 
              padding: 8px 16px; 
              cursor: pointer; 
              font-size: 14px;
              font-weight: bold;
              display: flex;
              align-items: center;
              gap: 6px;
              transition: all 0.2s ease;
            `}
          >
            {selectedPolicy().icon} {selectedPolicy().display_name}
            <span style="margin-left: 4px;">{showPolicySelector() ? "‚ñ≤" : "‚ñº"}</span>
          </button>
        </div>
        
        <Show when={showPolicySelector()}>
          <div style="
            background: var(--tg-theme-bg-color, #f8f9fa);
            border: 1px solid #e9ecef;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
          ">
            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div style="display: flex; gap: 8px; margin-bottom: 16px; overflow-x: auto; padding-bottom: 8px;">
              <For each={Object.entries(POLICY_CATEGORIES)}>
                {([key, category]) => (
                  <button
                    onClick={() => setActiveCategory(key as keyof typeof POLICY_CATEGORIES)}
                    style={`
                      background: ${activeCategory() === key ? '#3b82f6' : 'transparent'};
                      color: ${activeCategory() === key ? 'white' : 'var(--tg-theme-text-color, #666)'};
                      border: 1px solid ${activeCategory() === key ? '#3b82f6' : '#ddd'};
                      border-radius: 20px;
                      padding: 8px 16px;
                      cursor: pointer;
                      font-size: 12px;
                      font-weight: bold;
                      white-space: nowrap;
                      transition: all 0.2s ease;
                    `}
                  >
                    {category.title}
                  </button>
                )}
              </For>
            </div>
            
            {/* –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <p style="
              color: var(--tg-theme-hint-color, #666);
              font-size: 13px;
              margin: 0 0 16px 0;
              font-style: italic;
            ">
              {POLICY_CATEGORIES[activeCategory()].description}
            </p>
            
            {/* –ü–æ–ª–∏—Ç–∏–∫–∏ */}
            <div style="display: grid; grid-template-columns: 1fr; gap: 8px;">
              <For each={POLICY_CATEGORIES[activeCategory()].policies}>
                {(policy) => (
                  <button
                    onClick={() => {
                      setSelectedPolicy(policy);
                      setShowPolicySelector(false);
                    }}
                    style={`
                      background: ${selectedPolicy().name === policy.name ? policy.color + '20' : 'transparent'};
                      border: 2px solid ${selectedPolicy().name === policy.name ? policy.color : '#e5e7eb'};
                      border-radius: 12px;
                      padding: 12px;
                      cursor: pointer;
                      text-align: left;
                      transition: all 0.2s ease;
                      display: flex;
                      align-items: center;
                      gap: 12px;
                    `}
                  >
                    <div style={`
                      background: ${policy.color};
                      color: white;
                      border-radius: 50%;
                      width: 40px;
                      height: 40px;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      font-size: 18px;
                      flex-shrink: 0;
                    `}>
                      {policy.icon}
                    </div>
                    <div style="flex: 1;">
                      <div style="font-weight: bold; color: var(--tg-theme-text-color, #333); margin-bottom: 4px;">
                        {policy.display_name}
                      </div>
                      <div style="font-size: 12px; color: var(--tg-theme-hint-color, #666); line-height: 1.3;">
                        {policy.description}
                      </div>
                      <div style="font-size: 11px; color: var(--tg-theme-hint-color, #888); margin-top: 4px;">
                        –ú–∏–Ω. –¥–ª–∏–Ω–∞: {policy.min_length} ‚Ä¢ –≠–Ω—Ç—Ä–æ–ø–∏—è: {policy.min_entropy || 30}+ –±–∏—Ç
                      </div>
                    </div>
                  </button>
                )}
              </For>
            </div>
          </div>
        </Show>
      </div>
      
      <div style="position: relative; margin-bottom: 16px;">
        <input
          type={showPassword() ? "text" : "password"}
          class="input-field"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞..."
          onInput={handlePasswordInput}
          value={password()}
          style="padding-right: 50px;"
        />
        <button
          onClick={() => setShowPassword(!showPassword())}
          style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); background: none; border: none; cursor: pointer; font-size: 18px;"
          title={showPassword() ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}
        >
          {showPassword() ? "üôà" : "üëÅÔ∏è"}
        </button>
      </div>

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å */}
      {password().length > 0 && (
        <>
          {/* –¢–µ–∫—É—â–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ */}
          <div style={`
            background: ${selectedPolicy().color}15;
            border: 2px solid ${selectedPolicy().color};
            border-radius: 12px;
            padding: 12px;
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 12px;
          `}>
            <div style={`
              background: ${selectedPolicy().color};
              color: white;
              border-radius: 50%;
              width: 32px;
              height: 32px;
              display: flex;
              align-items: center;
              justify-content: center;
              font-size: 14px;
              flex-shrink: 0;
            `}>
              {selectedPolicy().icon}
            </div>
            <div>
              <div style="font-weight: bold; color: var(--tg-theme-text-color, #333);">
                –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É: {selectedPolicy().display_name}
              </div>
              <div style="font-size: 12px; color: var(--tg-theme-hint-color, #666);">
                {selectedPolicy().description}
              </div>
            </div>
          </div>

          {/* –°—Ç–∞—Ç—É—Å */}
          <div class={`status-card ${
            status() === "OK" ? "status-ok" : 
            status() === "WARN" ? "status-warn" : "status-fail"
          }`}>
            <strong>–í–µ—Ä–¥–∏–∫—Ç: </strong>
            {status() === "OK" ? "‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º" : 
             status() === "WARN" ? "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è" : 
             "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"}
          </div>

          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
          <div class="section">
            <div class="metric">
              <strong>–î–ª–∏–Ω–∞:</strong> {result().length} —Å–∏–º–≤–æ–ª–æ–≤
            </div>
            <div class="metric">
              <strong>–≠–Ω—Ç—Ä–æ–ø–∏—è:</strong> {result().entropy_bits} –±–∏—Ç
            </div>
            <div class="metric">
              <strong>–£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã:</strong> {STRENGTH_LABELS[result().strength]} ({result().strength}/4)
            </div>
          </div>

          {/* –ö–ª–∞—Å—Å—ã —Å–∏–º–≤–æ–ª–æ–≤ */}
          <div class="section">
            <div class="section-title">–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã:</div>
            <div style="display: flex; flex-wrap: wrap; gap: 8px;">
              <span style={`padding: 4px 8px; border-radius: 4px; font-size: 12px; ${
                result().classes.lower ? 'background: #d4edda; color: #155724;' : 'background: #f8d7da; color: #721c24;'
              }`}>
                {result().classes.lower ? "‚úì" : "‚úó"} –°—Ç—Ä–æ—á–Ω—ã–µ
              </span>
              <span style={`padding: 4px 8px; border-radius: 4px; font-size: 12px; ${
                result().classes.upper ? 'background: #d4edda; color: #155724;' : 'background: #f8d7da; color: #721c24;'
              }`}>
                {result().classes.upper ? "‚úì" : "‚úó"} –ó–∞–≥–ª–∞–≤–Ω—ã–µ
              </span>
              <span style={`padding: 4px 8px; border-radius: 4px; font-size: 12px; ${
                result().classes.digits ? 'background: #d4edda; color: #155724;' : 'background: #f8d7da; color: #721c24;'
              }`}>
                {result().classes.digits ? "‚úì" : "‚úó"} –¶–∏—Ñ—Ä—ã
              </span>
              <span style={`padding: 4px 8px; border-radius: 4px; font-size: 12px; ${
                result().classes.special ? 'background: #d4edda; color: #155724;' : 'background: #f8d7da; color: #721c24;'
              }`}>
                {result().classes.special ? "‚úì" : "‚úó"} –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
              </span>
            </div>
          </div>

          {/* –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–∏—Ç–∏–∫–µ */}
          <div class="section">
            <div class="section-title">–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–∏—Ç–∏–∫–µ NIST:</div>
            <For each={result().compliance}>
              {(rule) => (
                <div style={`font-size: 14px; margin-bottom: 4px; ${
                  rule.status === "PASS" ? "color: #155724;" : 
                  rule.status === "WARN" ? "color: #856404;" : "color: #721c24;"
                }`}>
                  {rule.status === "PASS" ? "‚úÖ" : rule.status === "WARN" ? "‚ö†Ô∏è" : "‚ùå"} {rule.rule}
                </div>
              )}
            </For>
          </div>

          {/* –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã */}
          {(result().patterns.length > 0 || result().dictionary_hits.length > 0) && (
            <div class="section">
              <div class="section-title" style="color: #721c24;">‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</div>
              <ul class="issue-list">
                <For each={result().patterns}>
                  {(pattern) => (
                    <li>{PATTERN_LABELS[pattern] || pattern}</li>
                  )}
                </For>
                <For each={result().dictionary_hits}>
                  {(hit) => (
                    <li>–ù–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π: "{hit.word}"</li>
                  )}
                </For>
              </ul>
            </div>
          )}

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          {result().fix_suggestions.length > 0 && (
            <div class="section">
              <div class="section-title" style="color: #155724;">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</div>
              <ul class="suggestion-list">
                <For each={result().fix_suggestions}>
                  {(suggestion) => <li>{suggestion}</li>}
                </For>
              </ul>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
          <div class="export-buttons">
            <button class="btn btn-secondary" onClick={handleExportJSON}>
              üìÑ JSON
            </button>
            <button class="btn btn-primary" onClick={handleExportPDF}>
              üìÑ PDF
            </button>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ */}
          <div style="margin-top: 16px; padding: 12px; background: #e7f3ff; border-radius: 8px; font-size: 12px; color: #0c5460;">
            üîí <strong>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</strong> –í–∞—à –ø–∞—Ä–æ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ. 
            –ù–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ —Å–µ—Ç–∏ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
          </div>
        </>
      )}

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω */}
      {password().length === 0 && (
        <div style="text-align: center; color: #6c757d; margin-top: 40px;">
          <p>üëÜ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤—ã—à–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
          <div style="font-size: 12px; margin-top: 16px;">
            <p><strong>–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è:</strong></p>
            <ul style="text-align: left; display: inline-block; margin: 0; padding-left: 20px;">
              <li>–î–ª–∏–Ω–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å</li>
              <li>–≠–Ω—Ç—Ä–æ–ø–∏—è (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å)</li>
              <li>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏</li>
              <li>–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</li>
              <li>–ü–æ–≤—Ç–æ—Ä—ã –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
            </ul>
          </div>
        </div>
      )}
    </div>
  );
}
