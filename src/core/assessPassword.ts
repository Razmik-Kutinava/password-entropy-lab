// /src/core/assessPassword.ts
import { detectPatterns } from "./patterns";
import { checkTopPasswords } from "./dict";
import { estimateEntropy } from "./entropy";

export type StrengthLevel = 0 | 1 | 2 | 3 | 4;

export interface Assessment {
  password_sample: string;
  length: number;
  classes: {
    lower: boolean;
    upper: boolean;
    digits: boolean;
    special: boolean;
  };
  entropy_bits: number;
  strength: StrengthLevel;
  patterns: string[];
  dictionary_hits: { word: string; dict: string }[];
  compliance: { rule: string; status: "PASS" | "WARN" | "FAIL"; details?: string }[];
  fix_suggestions: string[];
  policy_name: string;
  timestamp: string;
}

export interface Policy {
  name: string;
  display_name: string;
  description: string;
  category: "basic" | "business" | "expert" | "regional";
  icon: string;
  color: string;
  min_length: number;
  max_length?: number;
  forbid_top_passwords: boolean;
  require_classes_if_short: boolean;
  min_entropy?: number;
  special_requirements?: string[];
}

// üî∞ –ë–ê–ó–û–í–´–ï –ü–û–õ–ò–¢–ò–ö–ò
export const BASIC_SECURITY: Policy = {
  name: "BASIC_SECURITY",
  display_name: "Basic Security",
  description: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
  category: "basic",
  icon: "üîí",
  color: "#22c55e",
  min_length: 8,
  forbid_top_passwords: true,
  require_classes_if_short: true,
};

export const NIST_MODERATE: Policy = {
  name: "NIST_800_63B_MODERATE",
  display_name: "NIST Modern",
  description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è NIST 800-63B –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
  category: "basic",
  icon: "üá∫üá∏",
  color: "#3b82f6",
  min_length: 12,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 35,
};

export const OWASP_WEB: Policy = {
  name: "OWASP_WEB_SECURITY",
  display_name: "OWASP Web",
  description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç OWASP –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–æ–≤",
  category: "basic",
  icon: "üåê",
  color: "#8b5cf6",
  min_length: 10,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 30,
  special_requirements: ["no_sequential_chars", "no_personal_info"],
};

// üíº –ë–ò–ó–ù–ï–° –ü–û–õ–ò–¢–ò–ö–ò
export const PCI_DSS: Policy = {
  name: "PCI_DSS_COMPLIANCE",
  display_name: "PCI DSS",
  description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –∫–∞—Ä—Ç",
  category: "business",
  icon: "üí≥",
  color: "#f59e0b",
  min_length: 12,
  max_length: 25,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 40,
  special_requirements: ["quarterly_change", "no_reuse_last_4"],
};

export const MICROSOFT_AD: Policy = {
  name: "MICROSOFT_AD_ENTERPRISE",
  display_name: "Microsoft AD",
  description: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ Microsoft Active Directory",
  category: "business",
  icon: "üè¢",
  color: "#0078d4",
  min_length: 14,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 42,
  special_requirements: ["complexity_requirements", "account_lockout_protection"],
};

export const GOOGLE_WORKSPACE: Policy = {
  name: "GOOGLE_WORKSPACE",
  display_name: "Google Workspace",
  description: "–ü–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Google –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
  category: "business",
  icon: "üîç",
  color: "#ea4335",
  min_length: 12,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 38,
  special_requirements: ["2fa_required", "session_management"],
};

// üéñÔ∏è –≠–ö–°–ü–ï–†–¢–ù–´–ï –ü–û–õ–ò–¢–ò–ö–ò
export const MILITARY_LEVEL: Policy = {
  name: "MILITARY_GRADE_SECURITY",
  display_name: "Military Level",
  description: "–í–æ–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
  category: "expert",
  icon: "üéñÔ∏è",
  color: "#dc2626",
  min_length: 16,
  max_length: 128,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 55,
  special_requirements: ["no_dictionary_words", "regular_rotation", "multi_factor_auth"],
};

export const BANKING_GRADE: Policy = {
  name: "BANKING_GRADE_SECURITY",
  display_name: "Banking Grade",
  description: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π",
  category: "expert",
  icon: "üè¶",
  color: "#059669",
  min_length: 15,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 50,
  special_requirements: ["transaction_signing", "time_based_tokens", "fraud_detection"],
};

export const ISO_27001: Policy = {
  name: "ISO_27001_COMPLIANCE",
  display_name: "ISO 27001",
  description: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é",
  category: "expert",
  icon: "üìã",
  color: "#7c3aed",
  min_length: 13,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 45,
  special_requirements: ["audit_trail", "risk_assessment", "incident_response"],
};

// üåç –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ü–û–õ–ò–¢–ò–ö–ò
export const GDPR_READY: Policy = {
  name: "GDPR_COMPLIANCE_EU",
  display_name: "GDPR Ready",
  description: "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º—É —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É –ø–æ –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
  category: "regional",
  icon: "üá™üá∫",
  color: "#1e40af",
  min_length: 11,
  forbid_top_passwords: true,
  require_classes_if_short: true,
  min_entropy: 36,
  special_requirements: ["data_portability", "right_to_erasure", "consent_management"],
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const ALL_POLICIES: Policy[] = [
  BASIC_SECURITY,
  NIST_MODERATE,
  OWASP_WEB,
  PCI_DSS,
  MICROSOFT_AD,
  GOOGLE_WORKSPACE,
  MILITARY_LEVEL,
  BANKING_GRADE,
  ISO_27001,
  GDPR_READY,
];

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
export const POLICY_CATEGORIES = {
  basic: {
    title: "–î–ª—è —Å–µ–±—è",
    description: "–ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
    policies: ALL_POLICIES.filter(p => p.category === "basic"),
  },
  business: {
    title: "–î–ª—è –±–∏–∑–Ω–µ—Å–∞", 
    description: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
    policies: ALL_POLICIES.filter(p => p.category === "business"),
  },
  expert: {
    title: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ",
    description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
    policies: ALL_POLICIES.filter(p => p.category === "expert"),
  },
  regional: {
    title: "–ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
    description: "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º",
    policies: ALL_POLICIES.filter(p => p.category === "regional"),
  },
};

function getStrengthLevel(entropy: number, length: number): StrengthLevel {
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –∏ –¥–ª–∏–Ω—ã
  if (entropy >= 60 && length >= 16) return 4; // –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π
  if (entropy >= 45 && length >= 12) return 3; // –°–∏–ª—å–Ω—ã–π  
  if (entropy >= 30 && length >= 8) return 2;  // –°—Ä–µ–¥–Ω–∏–π
  if (entropy >= 20 && length >= 6) return 1;  // –°–ª–∞–±—ã–π
  return 0; // –û—á–µ–Ω—å —Å–ª–∞–±—ã–π
}

function generateFixSuggestions(
  password: string,
  patterns: string[],
  dictHits: { word: string; dict: string }[],
  classes: any,
  policy: Policy
): string[] {
  const suggestions: string[] = [];

  // –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–ª–∏–Ω–æ–π
  if (password.length < policy.min_length) {
    suggestions.push(`–£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª–∏–Ω—É –¥–æ –º–∏–Ω–∏–º—É–º ${policy.min_length} —Å–∏–º–≤–æ–ª–æ–≤`);
  }

  // –°–ª–æ–≤–∞—Ä–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  if (dictHits.length > 0) {
    suggestions.push("–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π");
  }

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const patternSuggestions: Record<string, string> = {
    repeat: "–ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ (aaa, 111)",
    keyboard_seq: "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (qwerty, –π—Ü—É–∫–µ–Ω)",
    numeric_seq: "–ò–∑–±–µ–≥–∞–π—Ç–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π (123456, 987654)",
    year: "–ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –≥–æ–¥—ã (1990-2025) –≤ –ø–∞—Ä–æ–ª—å",
    single_char: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
    only_digits: "–î–æ–±–∞–≤—å—Ç–µ –±—É–∫–≤—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
  };

  for (const pattern of patterns) {
    if (pattern in patternSuggestions) {
      suggestions.push(patternSuggestions[pattern]);
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º —Å–∏–º–≤–æ–ª–æ–≤
  if (password.length < 16 && policy.require_classes_if_short) {
    if (!classes.lower) suggestions.push("–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã");
    if (!classes.upper) suggestions.push("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã");
    if (!classes.digits) suggestions.push("–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã");
    if (!classes.special) suggestions.push("–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (!@#$%^&*)");
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (suggestions.length === 0 && password.length < 16) {
    suggestions.push("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–æ 16+ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
  }

  return suggestions;
}

// –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ
function checkPolicyCompliance(password: string, policy: Policy): { rule: string; status: "PASS" | "WARN" | "FAIL"; details?: string }[] {
  const compliance: { rule: string; status: "PASS" | "WARN" | "FAIL"; details?: string }[] = [];
  const length = password.length;
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
  compliance.push({
    rule: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${policy.min_length} —Å–∏–º–≤–æ–ª–æ–≤`,
    status: length >= policy.min_length ? "PASS" : "FAIL",
    details: length >= policy.min_length ? 
      `–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: ${length} —Å–∏–º–≤–æ–ª–æ–≤` : 
      `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${length}/${policy.min_length}`
  });

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
  if (policy.max_length) {
    compliance.push({
      rule: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${policy.max_length} —Å–∏–º–≤–æ–ª–æ–≤`,
      status: length <= policy.max_length ? "PASS" : "WARN",
      details: length <= policy.max_length ? 
        `–î–ª–∏–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö: ${length} —Å–∏–º–≤–æ–ª–æ–≤` : 
        `–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${length}/${policy.max_length}`
    });
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
  const classes = {
    lower: /[a-z–∞-—è—ë]/.test(password),
    upper: /[A-Z–ê-–Ø–Å]/.test(password),
    digits: /\d/.test(password),
    special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/.test(password),
  };

  const classCount = Object.values(classes).filter(Boolean).length;
  
  if (policy.require_classes_if_short && length < 16) {
    compliance.push({
      rule: "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 3 –∫–ª–∞—Å—Å–∞)",
      status: classCount >= 3 ? "PASS" : classCount >= 2 ? "WARN" : "FAIL",
      details: `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${classCount} –∫–ª–∞—Å—Å–æ–≤: ${
        classes.lower ? "—Å—Ç—Ä–æ—á–Ω—ã–µ " : ""
      }${classes.upper ? "–∑–∞–≥–ª–∞–≤–Ω—ã–µ " : ""
      }${classes.digits ? "—Ü–∏—Ñ—Ä—ã " : ""
      }${classes.special ? "—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã" : ""}`
    });
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω—Ç—Ä–æ–ø–∏–∏
  const entropy_bits = estimateEntropy(password, classes, detectPatterns(password), checkTopPasswords(password));
  const minEntropy = policy.min_entropy || 30;
  
  compliance.push({
    rule: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è: ${minEntropy} –±–∏—Ç`,
    status: entropy_bits >= minEntropy ? "PASS" : entropy_bits >= (minEntropy - 10) ? "WARN" : "FAIL",
    details: `–¢–µ–∫—É—â–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è: ${entropy_bits.toFixed(1)} –±–∏—Ç`
  });

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
  const dictionary_hits = checkTopPasswords(password);
  compliance.push({
    rule: "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π",
    status: dictionary_hits.length === 0 ? "PASS" : "FAIL",
    details: dictionary_hits.length === 0 ? 
      "–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—è—Ö" : 
      `–ù–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—è—Ö: ${dictionary_hits.map(h => h.word).join(", ")}`
  });

  // 6. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏
  if (policy.special_requirements) {
    for (const req of policy.special_requirements) {
      let status: "PASS" | "WARN" | "FAIL" = "PASS";
      let details = "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ";
      
      switch (req) {
        case "no_sequential_chars":
          const hasSequential = /(abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz|123|234|345|456|567|678|789|890|qwe|wer|ert|rty|tyu|yui|uio|iop|asd|sdf|dfg|fgh|ghj|hjk|jkl|zxc|xcv|cvb|vbn|bnm)/i.test(password);
          status = hasSequential ? "FAIL" : "PASS";
          details = hasSequential ? "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã" : "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
          break;
          
        case "no_personal_info":
          // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∞—Ç—ã –∏ –∏–º–µ–Ω–∞
          const hasPersonalInfo = /(19|20)\d{2}|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/i.test(password);
          status = hasPersonalInfo ? "WARN" : "PASS";
          details = hasPersonalInfo ? "–í–æ–∑–º–æ–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" : "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞";
          break;
          
        case "quarterly_change":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É, –Ω–µ –∫ –ø–∞—Ä–æ–ª—é
          details = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞";
          break;
          
        case "no_reuse_last_4":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ, –Ω–µ –∫ –ø–∞—Ä–æ–ª—é
          details = "–ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –ø–∞—Ä–æ–ª—è";
          break;
          
        case "complexity_requirements":
          status = classCount >= 3 ? "PASS" : "WARN";
          details = `–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${classCount}/4 –∫–ª–∞—Å—Å–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤`;
          break;
          
        case "account_lockout_protection":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞";
          break;
          
        case "2fa_required":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É
          details = "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
          break;
          
        case "session_management":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏";
          break;
          
        case "no_dictionary_words":
          const hasDictionaryWords = dictionary_hits.length > 0;
          status = hasDictionaryWords ? "FAIL" : "PASS";
          details = hasDictionaryWords ? "–°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Å–ª–æ–≤–∞" : "–°–ª–æ–≤–∞—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
          break;
          
        case "regular_rotation":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É
          details = "–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è";
          break;
          
        case "multi_factor_auth":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É
          details = "–ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è";
          break;
          
        case "transaction_signing":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π";
          break;
          
        case "time_based_tokens":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã";
          break;
          
        case "fraud_detection":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞";
          break;
          
        case "audit_trail":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–ê—É–¥–∏—Ç–æ—Ä—Å–∫–∏–π —Å–ª–µ–¥";
          break;
          
        case "risk_assessment":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É
          details = "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤";
          break;
          
        case "incident_response":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É
          details = "–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã";
          break;
          
        case "data_portability":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö";
          break;
          
        case "right_to_erasure":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–ü—Ä–∞–≤–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ";
          break;
          
        case "consent_management":
          status = "PASS"; // –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ
          details = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è–º–∏";
          break;
      }
      
      const reqDescriptions: Record<string, string> = {
        "no_sequential_chars": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
        "no_personal_info": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "quarterly_change": "–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞",
        "no_reuse_last_4": "–ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –ø–∞—Ä–æ–ª—è",
        "complexity_requirements": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
        "account_lockout_protection": "–ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
        "2fa_required": "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "session_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏",
        "no_dictionary_words": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤",
        "regular_rotation": "–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è",
        "multi_factor_auth": "–ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "transaction_signing": "–ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
        "time_based_tokens": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã",
        "fraud_detection": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞",
        "audit_trail": "–ê—É–¥–∏—Ç–æ—Ä—Å–∫–∏–π —Å–ª–µ–¥",
        "risk_assessment": "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤",
        "incident_response": "–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã",
        "data_portability": "–ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
        "right_to_erasure": "–ü—Ä–∞–≤–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ",
        "consent_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è–º–∏",
      };
      
      compliance.push({
        rule: reqDescriptions[req] || req,
        status,
        details
      });
    }
  }

  return compliance;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –ø–æ –≤—Å–µ–º –ø–æ–ª–∏—Ç–∏–∫–∞–º
export function assessPasswordAllPolicies(password: string): Record<string, Assessment> {
  const results: Record<string, Assessment> = {};
  
  for (const policy of ALL_POLICIES) {
    results[policy.name] = assessPassword(password, policy);
  }
  
  return results;
}

export function assessPassword(password: string, policy: Policy = NIST_MODERATE): Assessment {
  // –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const masked = "‚Ä¢".repeat(Math.min(password.length, 50));
  const length = password.length;

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
  const classes = {
    lower: /[a-z–∞-—è—ë]/.test(password),
    upper: /[A-Z–ê-–Ø–Å]/.test(password),
    digits: /\d/.test(password),
    special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/.test(password),
  };

  // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  const patterns = detectPatterns(password);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
  const dictionary_hits = checkTopPasswords(password);
  
  // –†–∞—Å—á–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏
  const entropy_bits = estimateEntropy(password, classes, patterns, dictionary_hits);
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–ª—ã
  const strength = getStrengthLevel(entropy_bits, length);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–∏—Ç–∏–∫–µ
  const compliance = checkPolicyCompliance(password, policy);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const fix_suggestions = generateFixSuggestions(password, patterns, dictionary_hits, classes, policy);

  return {
    password_sample: masked,
    length,
    classes,
    entropy_bits,
    strength,
    patterns,
    dictionary_hits,
    compliance,
    fix_suggestions,
    policy_name: policy.name,
    timestamp: new Date().toISOString(),
  };
}
