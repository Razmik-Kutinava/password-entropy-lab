const http = require('http');
const fs = require('fs');

function getNgrokUrl() {
  return new Promise((resolve, reject) => {
    const req = http.get('http://localhost:4040/api/tunnels', (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const tunnels = JSON.parse(data);
          const httpsUrl = tunnels.tunnels.find(t => t.proto === 'https')?.public_url;
          if (httpsUrl) {
            resolve(httpsUrl);
          } else {
            reject('HTTPS tunnel not found');
          }
        } catch (error) {
          reject(`Parse error: ${error.message}`);
        }
      });
    });
    
    req.on('error', (error) => {
      reject(`Request error: ${error.message}`);
    });
    
    req.setTimeout(5000, () => {
      req.destroy();
      reject('Timeout');
    });
  });
}

function updateBotUrl(newUrl) {
  try {
    let botCode = fs.readFileSync('telegram-bot.cjs', 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º URL –≤ –±–æ—Ç–µ
    const oldUrlPattern = /const MINI_APP_URL = ['"`]([^'"`]+)['"`];/;
    const newBotCode = botCode.replace(oldUrlPattern, `const MINI_APP_URL = '${newUrl}';`);
    
    if (newBotCode !== botCode) {
      fs.writeFileSync('telegram-bot.cjs', newBotCode);
      console.log('‚úÖ URL –≤ –±–æ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: node telegram-bot.cjs');
      return true;
    } else {
      console.log('‚ö†Ô∏è URL –≤ –±–æ—Ç–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º ngrok URL...');
  
  let attempts = 0;
  const maxAttempts = 10;
  
  while (attempts < maxAttempts) {
    try {
      const url = await getNgrokUrl();
      console.log('\nüéâ NGROK URL –ø–æ–ª—É—á–µ–Ω!');
      console.log('üìã URL:', url);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞
      if (updateBotUrl(url)) {
        console.log('\nüì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ Telegram!');
        console.log('üîó URL –¥–ª—è Mini App:', url);
      }
      
      process.exit(0);
    } catch (error) {
      attempts++;
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}: ${error}`);
      
      if (attempts >= maxAttempts) {
        console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URL');
        console.log('üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
        console.log('  1. ngrok –∑–∞–ø—É—â–µ–Ω: npx ngrok http 5173');
        console.log('  2. Vite dev —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: npm run dev');
        console.log('  3. –ü–æ—Ä—Ç 4040 –¥–æ—Å—Ç—É–ø–µ–Ω');
        process.exit(1);
      }
      
      // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
}

main();
