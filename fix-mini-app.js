// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Mini App URL
const http = require('http');
const fs = require('fs');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ngrok URL
function getNgrokUrl() {
  return new Promise((resolve, reject) => {
    const req = http.get('http://localhost:4040/api/tunnels', (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          const httpsUrl = response.tunnels.find(t => t.proto === 'https')?.public_url;
          if (httpsUrl) {
            resolve(httpsUrl);
          } else {
            reject('HTTPS tunnel not found');
          }
        } catch (error) {
          reject('Failed to parse response');
        }
      });
    });
    
    req.on('error', () => reject('Connection failed'));
    req.setTimeout(3000, () => {
      req.destroy();
      reject('Timeout');
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
function updateBot(newUrl) {
  try {
    let content = fs.readFileSync('telegram-bot.cjs', 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º URL
    const oldPattern = /const MINI_APP_URL = ['"`]([^'"`]+)['"`];/;
    const newContent = content.replace(oldPattern, `const MINI_APP_URL = '${newUrl}';`);
    
    if (newContent !== content) {
      fs.writeFileSync('telegram-bot.cjs', newContent);
      console.log('‚úÖ –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º URL:', newUrl);
      return true;
    } else {
      console.log('‚ö†Ô∏è URL —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Mini App...');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ngrok URL
  try {
    const ngrokUrl = await getNgrokUrl();
    console.log('üéâ –ù–∞–π–¥–µ–Ω ngrok URL:', ngrokUrl);
    
    if (updateBot(ngrokUrl)) {
      console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:');
      console.log('   node telegram-bot.cjs');
      console.log('\nüì± –ò –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram!');
    }
    return;
  } catch (error) {
    console.log('‚ö†Ô∏è Ngrok –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
  }
  
  // –ï—Å–ª–∏ ngrok –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log('\nüîß –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ localhost (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
  if (updateBot('http://localhost:5173')) {
    console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localhost URL');
    console.log('üìã –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram –Ω—É–∂–µ–Ω HTTPS URL –æ—Ç ngrok');
    console.log('\nüõ†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ ngrok:');
    console.log('   npx ngrok http 5173');
    console.log('   –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
  }
}

main();
